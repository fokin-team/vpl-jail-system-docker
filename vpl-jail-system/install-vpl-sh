#!/bin/bash
# package:		Part of vpl-jail-system
# copyright:    Copyright (C) 2014 Juan Carlos Rodriguez-del-Pino
# license:      GNU/GPL, see LICENSE.txt or http://www.gnu.org/licenses/gpl.txt
# Description:  Script to install vpl-jail-system (Ubuntu 12 and CentOS)
echo "INSTALLING VPL-JAIL-SYSTEM"
echo "=========================="
LOGFILE=/var/log/vpl_installation.log
VPL_PROGRAMS_DIR=/usr/sbin/vpl
VPL_CONFIG_DIR=/etc/vpl
date >$LOGFILE
exec &> >(tee $LOGFILE)

if [ "$UID" != "0" ] && [ "$EUID" != "0" ] ; then
    echo "This script need to be run as root and is run as $USER uid $UID euid $EUID"
    exit 1;
fi
# Detect package manager (YUM/APT)
if [ "$(command -v yum)" != "" ] ; then
	echo "Using YUM package manager" 
    function vpl_install_base {
        yum -y install $1 >>$LOGFILE
        return $?
    }
    function vpl_install_check {
        yum list $1 &> /dev/null
        return $?
	}
    PMTYPE="1"
else
	if [ "$(command -v apt-get)" != "" ] ; then
		echo "Using APT package manager"
		echo "Updating distribution software DB"
		apt-get update >>$LOGFILE
	    function vpl_install_base {
            apt-get -q -y --allow-unauthenticated install $1 >>$LOGFILE
            return $?
	    }
	    function vpl_install_check {
            apt-cache pkgnames $1 | grep -q -x -F $1
            return $?
	    }
    	PMTYPE="2"
    else
    	echo "Sorry, I can't detect the package manager of the system"
    	exit 1
	fi
fi
# Detect service manager
if [ "$(command -v systemctl)" != "" ] ; then
	echo "Using systemd service manager"	 
    function vpl_install_service {
        cp vpl-jail-system.initd $VPL_PROGRAMS_DIR/vpl-jail-system
        chmod +x $VPL_PROGRAMS_DIR/vpl-jail-system
        cp vpl-jail-system.service /etc/systemd/system/vpl-jail-system.service
        systemctl daemon-reload
        systemctl enable vpl-jail-system
    }
    function vpl_stop_service {
        systemctl stop vpl-jail-system
	}
    function vpl_start_service {
        systemctl start vpl-jail-system
	}
	function vpl_info_using_service {
	    echo
        echo "-------------------------------------------"
        echo "Notice: you may use next command to control the service"
        echo "systemctl [start|stop|status] vpl-jail-system"
	}
    SMANAGER="1"
else
	echo "Using system V service manager"	 
    function vpl_install_service {
        cp vpl-jail-system.initd /etc/init.d/vpl-jail-system
        chmod +x /etc/init.d/vpl-jail-system
        if [ "$(command -v update-rc.d)" != "" ] ; then
	        update-rc.d -f vpl-jail-system remove >>$LOGFILE
			update-rc.d vpl-jail-system defaults >>$LOGFILE
        else
        	if [ "$(command -v chkconfig)" != "" ] ; then
	        	chkconfig --add vpl-jail-system  >>$LOGFILE
	        else
            	echo "ERROR installing the service. Not found update-rc.d or chkconfig"
        	fi
        fi
    }
    function vpl_stop_service {
        service vpl-jail-system stop
	}
    function vpl_start_service {
        service vpl-jail-system start
	}
	function vpl_info_using_service {
		echo
        echo "-------------------------------------------"
        echo "Notice: you may use next command to control the service"
        echo "service vpl-jail-system [start|stop|status]"
	}
    SMANAGER="2"
fi

function vpl_check_selinux {
	if [ "$(command -v setenforce)" != "" ] ; then
		echo "Your system seems to be using SELinux."
		echo "You may need to disable or configure SELinux to install and run vpl-jail-system service"
		echo "To reactivate the vpl-jail-system service run:"
		echo "systemctl daemon-reload"
		echo "systemctl enable vpl-jail-system"
		echo "systemctl start vpl-jail-system"
	fi
}
function vpl_install {
	local found=0
	local checked=""
	echo -n "Installing $1: "
	shift
	while [ "$#" != "0" ] ; do
		checked="$checked $1"
   		vpl_install_check $1
		if [ $? -eq 0 ] ; then
	   	   echo -n $1
	       vpl_install_base $1
	   	   if [ $? -eq 0 ] ; then
	   	   		found=1
	   	   		echo " [OK]"
	   	   else
	   	   		echo " [ERROR]"
	   	   fi
	       break
   	   fi
       shift
   done
   if [ $found -eq 0 ] ; then
   	   echo "[Package not found. Checked$checked]"
   fi
}

function vpl_install_npm_check {
    vpl_install_check npm
	if [ $? -eq 0 ] ; then
		vpl_install_base npm
	fi
}

function vpl_install_npm {
    vpl_install_check npm
	if [ $? -eq 0 ] ; then
		vpl_install_base npm
	fi
	local found=1
	local checked=""
	echo -n "Installing $1 (using npm): "
	shift
	while [ "$#" != "0" ] ; do
	    checked="$checked $1"
   	    npm install -g $1 &> /dev/null
   	    if [ $? -eq 0 ] ; then
   	   	    echo " [OK]"
	        found=0
   	   	    break
   	    fi
        shift
   done
   if [ $found -eq 1 ] ; then
   	   echo "[Package npm not found. Checked $checked"
   fi
}


function vpl_installq {
   echo -n "Do you want to install $1 (y/n) "
   A="y"
   read A
   if [ "$A" == "y" ] ; then
        vpl_install $@
   fi
}

function vpl_install_letsencrypt {
	vpl_install "Let's Encrypt" certbot
	if [ "$(command -v certbot)" = "" ] ; then
		echo "Error: certbot not installed."
		echo "Please install cerbot manually"
		exit 0
	fi
	local DETECTEDFQDN=""
	local HNAME=""
	if [ "$(command -pv dnsdomainname)" != "" ] ; then
		DETECTEDFQDN=$(dnsdomainname -A)
	fi
	echo "Please, enter the domain name (FQDN) of this machine in order to install the configure Certbot."
	echo -n "($DETECTEDFQDN): "
	read HNAME
	if [ "$HNAME" == "" ] ; then
		HNAME=$DETECTEDFQDN
	fi
	certbot certonly --standalone --preferred-challenges http -d $HNAME
	systemctl enable --now certbot-renew.timer
	echo "pre_hook = systemctl stop vpl-jail-system" >> /etc/letsencrypt/renewal/$HNAME.conf
	echo "post_hook = systemctl start vpl-jail-system" >> /etc/letsencrypt/renewal/$HNAME.conf
	ln -s /etc/letsencrypt/live/$HNAME/fullchain.pem /etc/vpl/cert.pem 2> /dev/null 
	ln -s /etc/letsencrypt/live/$HNAME/privkey.pem /etc/vpl/key.pem 2> /dev/null
}

function vpl_install_jgrasp {
	local URLBASE="https://www.jgrasp.org/dl4g/jgrasp/"
	local VERSION="205_04"
	local FILENAME="jgrasp205_04.zip"
	local CDIR=""
	while true ; do
		echo -n "Version number of JGrasp to install e.g. 2.0.5_04 (0 to exit)"
		read VERSION
		if [ "$VERSION" == "0" ] ; then
			break
		fi 
		VERSION=$(echo $VERSION | sed 's/\.//g')
		FILENAME="jgrasp$VERSION.zip"
		wget -q $URLBASE$FILENAME
		if [ "$?" == "0" -a -f "$FILENAME" ] ; then
			unzip $FILENAME > /dev/null
			if [ -d "jgrasp" ] ; then
				rm -R /usr/local/jgrasp 2> /dev/null
				rm /usr/bin/jgrasp 2> /dev/null
				mv jgrasp /usr/local/jgrasp
				ln -s /usr/local/jgrasp/bin/jgrasp /usr/bin/jgrasp
				CDIR=$(pwd)
				cd /usr/local/jgrasp/src
				./configure > /dev/null
				./Make.sh
				if [ "$?" == "0" ] ; then
					cd $CDIR
					break
				else
					cd $CDIR
					echo "Error compiling code. Try again"
				fi
			else
				echo "Error uncompressing package, jgrasp dir not found. Try again"
			fi
		else
			echo "Version not found. Try gain."
		fi
	done
}
function vpl_install_kotlin {
	local URLBASE="https://github.com/JetBrains/kotlin/releases/download/"
	local VERSION="1.4.21"
	local FILENAME=""
	local CDIR=""
	while true ; do
		echo -n "Version number of Kotlin to install e.g. 1.4.21 (0 to exit)"
		read VERSION
		if [ "$VERSION" == "0" ] ; then
			break
		fi
		SUBDIR="v$VERSION/"
		FILENAME="kotlin-compiler-$VERSION.zip"
		wget -q $URLBASE$SUBDIR$FILENAME
		if [ "$?" == "0" -a -f "$FILENAME" ] ; then
			unzip $FILENAME > /dev/null
			if [ -d "kotlinc" ] ; then
				DESTINATION=/opt/kotlin
				rm -R $DESTINATION 2> /dev/null
				mv kotlinc $DESTINATION
				ln -s $DESTINATION/bin/kotlinc /usr/bin/kotlinc
				break
			else
				echo "Error uncompressing package, jgrasp dir not found. Try again"
			fi
		else
			echo "Version not found. Try gain."
		fi
	done
}

function vpl_generate_selfsigned_certificate {
	local A=""
	local HNAMEW=$(hostname --long| sed 's/^[^\.]*/\*/g')
	local HNAME=$(hostname --long)
	local INAME
	echo "Generating self-signed SSL certificate for $HNAME machine"
	#Get host name to generate the certificate
	echo -n "Do you want a certificate with wildcard for a set of servers ($HNAMEW)? (y/n)"
	read A
	if [ "$A" == "y" ] ; then
		INAME=$HNAMEW
	else
		INAME=$HNAME
	fi
	if [ "$INAME" = "" ] ; then
		INAME=localhost
	fi
	#Generate key
	openssl genrsa -passout pass:12345678 -des3 -out key.pem 2048
	#Generate certificate for this server
	echo -n "Do you want to customize the certificate info? (y/n)"
	read A
	if [ "$A" == "y" ] ; then
		openssl req -new -key key.pem -out certini.pem -passin pass:12345678
	else
		local SUBJ="/C=ES/ST=State/L=Location/O=VPL/OU=Execution server/CN=$INAME"
		openssl req -new -subj "$SUBJ" -key key.pem -out certini.pem -passin pass:12345678
	fi
	#Remove key password
	cp key.pem keyini.pem
	openssl rsa -in keyini.pem -out key.pem -passin pass:12345678
	#Generate self signed certificate for 5 years
	openssl x509 -in certini.pem -out cert.pem -req -signkey key.pem -days 1826 
}

function vpl_install_daemon() {
	echo "Preparing daemon compilation"
	./configure >>$LOGFILE
	echo "Compiling daemon (vpl-jail-server)"
	make >>$LOGFILE
	if [ -d $VPL_CONFIG_DIR ] ; then
		echo "Updating installation => $VPL_CONFIG_DIR"
		#Stop service
		vpl_stop_service >>$LOGFILE
	else
		echo "Installing => $VPL_CONFIG_DIR"
		mkdir $VPL_CONFIG_DIR
	fi
	if [ ! -d $VPL_PROGRAMS_DIR ] ; then
		mkdir $VPL_PROGRAMS_DIR
	fi
	#Copy daemon 
	cp src/vpl-jail-server $VPL_PROGRAMS_DIR
}
echo "Installation log file => $LOGFILE"
if [ "$1" == "update" ] ; then
	vpl_install_daemon
	vpl_start_service >>$LOGFILE
	exit
fi
echo "Preparing the installation"
if [ "$PMTYPE" == "1" ] ; then
	vpl_install "LSB core" redhat-lsb-core
	vpl_install "make" make
	vpl_install "C compiler" gcc
	vpl_install "C++ compiler" gcc-c++
	vpl_install "SSL library" openssl		
	vpl_install "SSL library" openssl-devel	
	vpl_install "Firewall" iptables
	vpl_install "Window manager" metacity
	vpl_install "xterm" xterm
	vpl_install "VNC server" tigervnc-server
	vpl_install "Web browser" firefox
else
	if [ "$(command -v add-apt-repository)" != "" ] ; then
		add-apt-repository universe &> /dev/null
	fi
	vpl_install "make" make
	vpl_install "LSB" lsb lsb-core lsb-compat
	vpl_install "C++ compiler" g++
	vpl_install "SSL library" openssl
	vpl_install "SSL library" libssl-dev
	vpl_install "Firewall" iptables
	vpl_install "X system" xorg
	vpl_install "dbus-x11" dbus-x11
	vpl_install "VNC server" tightvncserver
	vpl_install "Fonts" xfonts-75dpi
	vpl_install "Fonts" xfonts-100dpi
	vpl_install "Window manager" openbox
	vpl_install "Configuration DB system" gconf2
	vpl_install "xterm" xterm
	if [ "$(command -v gconftool-2)" != "" ] ; then
		gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults -t string --set /apps/metacity/general/theme Redmond
	fi
	vpl_install "Web browser" firefox firefox-esr
	vpl_install "wget" wget
	vpl_install "curl" curl
	vpl_install "net-tools" net-tools
	vpl_install "bc" bc
fi
vpl_install_daemon
#Copy configuration file
VPL_CONFIGFILE=$VPL_CONFIG_DIR/vpl-jail-system.conf
if [ -f $VPL_CONFIGFILE ] ; then
	echo "Replace current configuration file with a fresh one?"
	echo -n "(y/n)"
	read A
	if [ "$A" == "y" ] ; then
		cp vpl-jail-system.conf $VPL_CONFIGFILE
		echo "Configuration file replaced"
	fi
else
	cp vpl-jail-system.conf $VPL_CONFIGFILE
	if [ "$PMTYPE" == "1"  ] ; then
		echo "" >> $VPL_CONFIGFILE
		echo "ENVPATH=/usr/bin:/bin" >> $VPL_CONFIGFILE
		echo "Configuration file changed for CentOS. Added ENVPATH"
	fi
fi
chmod 600 $VPL_CONFIGFILE
# Copy launch scripts
cp vpl_*.sh $VPL_PROGRAMS_DIR
chmod +x $VPL_PROGRAMS_DIR/*.sh

vpl_install_service

#create default control dir
if [ ! -d /var/vpl-jail-system ] ; then
	mkdir /var/vpl-jail-system
fi
chmod 0600 /var/vpl-jail-system

if [ ! -f $VPL_CONFIG_DIR/key.pem ] ; then
	echo "VPL execution server needs SSL certificates to accept https:"
	echo "and wss: requests."
	echo "If you have certificates then copy the key and the certificate file"
	echo "in pem format to $VPL_CONFIG_DIR/key.pem and $VPL_CONFIG_DIR/cert.pem"
	echo "If you don't have certificate the intaller can install and configure Let's Encrypt for you."
	echo "Notice that this machine must be accesible from internet and has port 80 available."
	echo -n "Install Let's Encrypt to get free certificates?"
	echo -n "(y/n)"
	read A	
	if [ "$A" != "n" ] ; then
		vpl_install_letsencrypt	
	else
		echo "If you want the intaller can generate a selfsigned certificate for you."
		echo -n "Generate the certificate?"
		read A
		if [ "$A" != "n" ] ; then
			vpl_generate_selfsigned_certificate
			cp key.pem $VPL_CONFIG_DIR
			cp cert.pem $VPL_CONFIG_DIR
			chmod 600 $VPL_CONFIG_DIR/*.pem
			rm key.pem keyini.pem certini.pem cert.pem
		fi
	fi
else
	echo "Found SSL certificate => Don't create a new one"
fi
if [ "$PMTYPE" = "1" ] ; then
    echo "Do you want to install development software? (C, C++, Java, etc.) (y/n)"
    read A
    if [ "$A" != "n" ] ; then
        vpl_install "Ada compiler (GNU)" gcc-gnat
        vpl_install "Assembler" nasm
        vpl_install "C compiler (GNU)" gcc
        vpl_install "Fortran compiler (GNU)" gcc-gfortran
        vpl_install "General purpose debugger (GNU)" gdb
        vpl_install "Java (OpenJDK)" java-1.8.0-openjdk-devel java-1.7.0-openjdk-devel
        vpl_install "Junit framework" junit
        vpl_install "Perl interpreter" perl
        vpl_install "PHP interpreter" php-cli
        vpl_install "Prolog" pl
        vpl_install "Python interpreter" python
        vpl_install "Ruby interpreter" ruby
        vpl_install "SQL interpreter" sqlite
        vpl_install "TCL interpreter" tcl
        vpl_install "Valgrind tool" valgrind
    fi
    echo "IMPORTANT: Please, set properly the ENVPATH in the config file /etc/vpl/vpl-jail-system.conf" 
    echo "           e.g. \"ENVPATH=/usr/bin:/bin:/usr/sbin\" and restart the service"
else
    echo "Do you want to install development software?"
    echo "  (Ada, Assambler, C, C++, C#, DDD, Fortran, gdb, Haskell, Java, "
    echo "   JUnit, Node.js, Octave, Pascal, Perl, PHP, Python, Ruby, Scala,"
    echo "   Scheme, TCL, valgrind)"
    echo -n "(y/n)"
    read A1
    echo "Do you want to install other development software?"
    echo "  (Clisp, Clojure, Cobol, CoffeScript, D, Erlang, Go, Haxe, JQuery,"
    echo "   Lua, R, Xquery, VHDL)"
    echo -n "(y/n)"
    read A2
    if [ "$A1" != "n" ] ; then
    	echo "This installation may take a long time"
        vpl_install "Ada compiler (GNU)" gnat
        vpl_install "Assembler" nasm
        vpl_install "C compiler (GNU)" gcc
        vpl_install "C# development framework (mono)" mono-complete
        vpl_install "DDD graphical front end debugger (GNU)" ddd
        vpl_install "Fortran compiler (GNU)" gfortran
        vpl_install "General purpose debugger (GNU)" gdb
        vpl_install "Haskell" hgc hugs
        vpl_install "Java runtime" default-jre openjdk-11-jre openjdk-8-jre openjdk-7-jre
        vpl_install "Java jdk" default-jdk openjdk-11-jdk openjdk-8-jdk openjdk-7-jdk
        if [ "$(command -v update-alternatives)" != "" ] ; then
			update-alternatives --auto java
			update-alternatives --auto javac
		fi
        vpl_install "JavaFX" openjfx
        vpl_install "Java Checkstyle" checkstyle
        vpl_install "Junit framework" junit4 junit
        vpl_install "JavaScript (Nodejs)" nodejs
        vpl_install "JavaScript (Nodejs-legacy)" nodejs-legacy
        vpl_install_npm "TypeScript" typescript
        vpl_install_npm "Sass" sass
        vpl_install "Octave (GNU)" octave
        vpl_install "Pascal compiler" fp-compiler
        vpl_install "Perl interpreter" perl
        vpl_install "PHP interpreter" php-cli php5-cli
        vpl_install "PHP readline" php-readline
        vpl_install "Sqlite for PHP" php-sqlite3 php5-sqlite
        vpl_install "Prolog" swi-prolog
        vpl_install "Python2 interpreter" python python2
        vpl_install "Python2 pydb" pydb
        vpl_install "Python2 pudb" python-pudb
        vpl_install "Python2 Tk" python-tk
        vpl_install "Python2 NumPy" python-numpy
        vpl_install "Python2 pandas" python-pandas
        vpl_install "Python2 Matplotlib" python-matplotlib
        vpl_install "Python3" python3
        vpl_install "Python3 Tk" python3-tk
        vpl_install "Python3 NumPy" python3-numpy
        vpl_install "Python3 pandas" python3-pandas
        vpl_install "Python3 Matplotlib" python3-matplotlib
        vpl_install "Python3 pudb" python3-pudb
        vpl_install "Python3 pycodestyle" python3-pycodestyle
        vpl_install "Python3 NetworkX" python3-networkx
		vpl_install "Python mypy" mypy
		vpl_install "Python pycodestyle" pycodestyle
		vpl_install "Python pydocstyle" pydocstyle
        vpl_install "Pythom Thonny" thonny
        vpl_install "Ruby interpreter" ruby
        vpl_install "Scala programming language" scala
        vpl_install "Scheme interpreter" plt-scheme racket
        vpl_install "SQL interpreter" sqlite3
        vpl_install "TCL interpreter" tcl
        vpl_install "Valgrind tool" valgrind
    fi
    if [ "$A2" != "n" ] ; then
    	echo "This installation may take a long time"
    	vpl_install "Clisp" clisp
        vpl_install "Clojure" clojure clojure1.6 clojure1.4
        vpl_install "Cobol" open-cobol
        vpl_install "CoffeeScript" coffeescript
        vpl_install "D compiler (GNU)" gdc
        vpl_install "Erlang" erlang
        vpl_install "Go programming language compiler" golang
        vpl_install "Haxe programming language" haxe
        vpl_install "JQuery JavaScript Lib" libjs-jquery
        vpl_install "JQuery-UI JavaScript Lib" libjs-jquery-ui
		vpl_install "Julia" julia
        vpl_install "Lua compiler 5.1" lua5.1
        vpl_install "R statistical computation and graphics system (GNU)" r-base
        vpl_install "MIPS R2000/R3000 emulator" spim
		vpl_install "MiniZinc constraint modeling language" minizinc
        vpl_install "XQuery interpreter" galax
        vpl_install "Verilog compiler" iverilog
        vpl_install "VHDL compiler" freehdl
        vpl_install "libtool required for VHDL" libtool-bin
        vpl_install "Groovy programming language" groovy
    fi

    echo "Do you want to try to install Kotlin?"
    echo -n "(y/n)"
    read A3
    if [ "$A3" != "n" ] ; then
    	vpl_install_kotlin
    fi

    echo "Do you want to try to install JGrasp?"
    echo -n "(y/n)"
    read A4
    if [ "$A4" != "n" ] ; then
    	vpl_install_jgrasp
    fi

    if [ -f /etc/init.d/apache2 ] ; then
    	echo "If you are planning to use apache2 or other service in this system,"
    	echo "notice that you must use different ports that in vpl-jail-system"
    	echo "It seems that you have apache2 in your system."
	    echo -n "Remove apache2 ? (y/n) "
    	read A
    	if [ "$A" == "y" ] ; then
        	#remove apache2
        	echo "Removing apache2"
        	if [ "SMANAGER" == "2" ] ; then
        		rm /etc/init.d/apache2 >/dev/null 2>&1
        		update-rc.d apache2 remove
        	else
        		systemctl disable apache2
        	fi
    	fi
    fi
fi

vpl_check_selinux
echo "Starting the service (vpl-jail-system)"
vpl_start_service
vpl_info_using_service


